1,161d0
< TESTING ITERATOR
< 
< TESTING ITERATOR
< 
< int* is a random-access iterator
< len = 7
< vect[0] = 7
< vect[1] = 6
< vect[2] = 5
< vect[3] = 4
< vect[4] = 3
< vect[5] = 2
< vect[6] = 1
< 7
< 6
< 5
< 4
< 3
< 2
< 1
< cannot create std::vector larger than max_size()
< SIZE = 0
< BACK = 0
< 43
< FRONT = 7
< BACK = 0
< Pre inc
< 5 | 5
< Pre dec
< 6 | 6
< Post inc
< 6 | 5
< Post dec
< 5 | 6
< ###############################################
< 6
< 6
< 5
< 3
< 6
< 6
< 5
< 3
< 4
< 4
< 6
< 6
< 4
< 4
< 5
< 7
< 3
< 4
< const_ite +=: 5
< const_ite -=: 7
< (it == const_it): 0
< (const_ite - it): -3
< (ite + 3 == it): 1
< TESTING REVERSE_ITERATOR
< 
< 10
< 15
< const_rite +=/-=: 21 | 42
< (rit == const_rit): 0
< (const_rite - rit): -2
< (rite + 3 == rit): 0
< /******** TESTING VECTOR ********/
< 
< TESTING RESIZE
< 
< Size = 7
< Resize 20, 42
< Size = 20
< Size = 20
< Resize 6
< Size = 6
< Resize 10
< Size = 10
< vect = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
< Resize 11, 42
< Resize 18, 45
< vect = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 45, 45, 45, 45, 45, 45, 45, 
< Size = 18
< TESTING ERASE
< 
< VectDel = 0, 6, 12, 18, 24, 
< SIZE = 5
< VectDel = 0, 6, 18, 24, 
< SIZE = 4
< vector[0] = 0
< vector[1] = 1
< vector[2] = 2
< vector[3] = 3
< vector[4] = 4
< vector[5] = 5
< vector[6] = 6
< size = 18
< after resize 4 size = 4
< vector size = 4
< vector size = 3
< vector n = 7
< vector size = 4
< vector size = 7
< vector.at(0) = 10
< vector.at(1) = 11
< vector.at(2) = 12
< vector.at(3) = 13
< vector.at(4) = overflow: vect.at(1) = 2147483647 + 1
< vect.at(1) = -2147483648
< TESTING MAX_SIZE
< max_size = 2305843009213693951
< 
< vect.insert() TESTS:
< 
< TESTING INSERT
< 42, 400, 42, 400, 42, 
< vect3 = 99, 42, 400, 42, 400, 42, 
< vect[0] = 41
< vect[1] = 41
< vect[2] = 42
< vect[3] = 42
< vect[4] = 12
< 
< vect[0] = 400
< vect[1] = 400
< TESTING SWAP
< VectA Before = 42, 42, 42, 42, 
< VectB Before = 21, 21, 21, 21, 21, 21, 
< VectA After = 21, 21, 21, 21, 21, 21, 
< VectB After = 42, 42, 42, 42, 
< TESTING ASSIGN
< AssignVect = 100
< AssignVect = 100
< AssignVect = 100
< AssignVect = 100
< AssignVect = 100
< AssignVect = 100
< AssignVect = 100
< Size of first: 7
< Size of second: 5
< Size of third: 3
< TESTING PUSH_BACK
< SIZE = 0
< SIZE = 10
< push back : 1
< push back : 2
< push back : 3
< push back : 4
< push back : 5
< push back : 6
< push back : 7
< push back : 8
< push back : 9
< push back : 10
< CLEAR myVector
< Hello World!
< size = 1
< size = 0
< myVector contains:
< 	### After assign(): ###
< 	### assign() on enough capacity and low size: ###
